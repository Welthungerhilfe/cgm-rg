pool:
  vmImage: ubuntu-latest

trigger:
  branches:
    include:
      - 'rg-v2'

variables:
  - group: cgm-rg-v2
  - name: VENV_CACHE_DIR
    value: $(Pipeline.Workspace)/.venv
  - name: PYTHON_VERSION
    # Currently 3.8 is the highest version supported by Azure Functions
    value: '3.8'

parameters:
  - name: var_groups
    type: object
    default:
      - sandbox
      - demo-qa
      - inbmz
      # - naunam
      # - nep
      # - uga

stages:
  - stage: Setup_and_Verify
    jobs:
      - job: Setup_and_Verify
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: $(PYTHON_VERSION)
          - task: Cache@2
            displayName: Cache Python dependencies
            inputs:
              key: 'etl-venv-cache | "$(Agent.OS)" | requirements.txt'
              path: $(VENV_CACHE_DIR)
              cacheHitVar: VENV_CACHE_RESTORED
          - script: |
              set -e
              python -m venv $(VENV_CACHE_DIR)
              source $(VENV_CACHE_DIR)/bin/activate
              pip install setuptools pytest
              pip install -r requirements.txt
            displayName: Install dependencies
            condition: and(not(canceled()), eq(variables.VENV_CACHE_RESTORED, 'false'))
          - script: |
              set -e
              source $(VENV_CACHE_DIR)/bin/activate
              pytest --junitxml="TEST-etl-pytest.xml"
            displayName: Run unit tests
            continueOnError: true
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/TEST-*.xml'
              failTaskOnFailedTests: true

  # - stage: Verion_Bump
  #   displayName: Bumb ETL version
  #   dependsOn: Setup_and_Verify
  #   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  #   jobs:
  #     - job:
  #       displayName: Update version number
  #       condition: ne(variables['Build.Reason'], 'Manual')
  #       steps:
  #         - checkout: self
  #           fetchDepth: 1
  #           persistCredentials: true
  #         - task: UsePythonVersion@0
  #           inputs:
  #             versionSpec: $(PYTHON_VERSION)
  #         - script: |
  #             set -e
  #             python -m venv $(VENV_CACHE_DIR)
  #             source $(VENV_CACHE_DIR)/bin/activate
  #             pip install bump2version
  #           displayName: Install bump2version
  #         - script: |
  #             set -e
  #             source $(VENV_CACHE_DIR)/bin/activate
  #             # Setup Git
  #             git config --global user.email "noreply@childgrowthmonitor.org"
  #             git config --global user.name "CGM CI"
  #             # Tag current commit
  #             CURR_VERSION=$(head -n 1 VERSION)
  #             git tag -a "v$CURR_VERSION" -m "ETL version $CURR_VERSION"
  #             # Bump PATCH version
  #             bumpversion --commit patch
  #             # Push tag and bumped version
  #             git push --follow-tags origin HEAD:main
  #           displayName: Tag and bump version
  - ${{ each env in parameters.var_groups }}:
    - stage: Deploy_${{ replace(env, '-', '_') }}
      displayName: Deploy ${{ env }}
      dependsOn: Setup_and_Verify
      # condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
      variables:
        - group: cgm-be-ci-${{ env }}-rg-ci
      jobs:
        - job: Deploy_Function_App
          displayName: "Function App deployment to ${{ env }}"
          steps:
            - task: CmdLine@2
              displayName: Install Azure Functions Core Tools
              inputs:
                script: |
                  set -e
                  if ! func --version &> /dev/null; then
                    sudo apt-get install -y azure-functions-core-tools-3
                  fi
                  echo "Func Core Tools $(func --version) installed."
            - task: AzureCLI@2
              displayName: Deploy Function App
              inputs:
                azureSubscription: cgm-${{ env }}-sub-cd
                scriptType: bash
                scriptLocation: inlineScript
                inlineScript: |
                  set -e
                  func azure functionapp publish "$(TARGET_FUNCTION_APP_NAME)" --python